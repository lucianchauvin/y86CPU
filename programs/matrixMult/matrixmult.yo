                            | 
0x000:                      |     .pos 0
0x000: 30f4f805000000000000 |     irmovq stack, %rsp
0x00a: 801400000000000000   |     call main 
0x013: 00                   |     halt
                            |     
                            | 
0x014:                      | main:
0x014: 30f20005000000000000 |     irmovq $0x500, %rdx #pointer for array
                            |     #populate the array with values
0x01e: 30f30100000000000000 |     irmovq $1, %rbx
0x028: 40320000000000000000 |     rmmovq %rbx, 0(%rdx)
0x032: 30f30200000000000000 |     irmovq $2, %rbx
0x03c: 40320800000000000000 |     rmmovq %rbx, 8(%rdx)
0x046: 30f30300000000000000 |     irmovq $3, %rbx
0x050: 40321000000000000000 |     rmmovq %rbx, 16(%rdx)
0x05a: 30f30400000000000000 |     irmovq $4, %rbx
0x064: 40321800000000000000 |     rmmovq %rbx, 24(%rdx)
0x06e: 30f30500000000000000 |     irmovq $5, %rbx
0x078: 40322000000000000000 |     rmmovq %rbx, 32(%rdx)
0x082: 30f30600000000000000 |     irmovq $6, %rbx
0x08c: 40322800000000000000 |     rmmovq %rbx, 40(%rdx)
0x096: 30f30700000000000000 |     irmovq $7, %rbx
0x0a0: 40323000000000000000 |     rmmovq %rbx, 48(%rdx)
0x0aa: 30f30800000000000000 |     irmovq $8, %rbx
0x0b4: 40323800000000000000 |     rmmovq %rbx, 56(%rdx)
                            | 
0x0be: a02f                 |     pushq %rdx
0x0c0: 80cc00000000000000   |     call matrixmultiply
0x0c9: b08f                 |     popq %r8
0x0cb: 90                   |     ret
                            | 
0x0cc:                      | matrixmultiply:
                            | 
                            | 
0x0cc: 50340800000000000000 |     mrmovq 8(%rsp), %rbx   #pointer to first matrix
                            |     
0x0d6: 30f00000000000000000 |     irmovq $0, %rax
                            |     
0x0e0: 40034000000000000000 |     rmmovq %rax, 64(%rbx)
0x0ea: 40034800000000000000 |     rmmovq %rax, 72(%rbx)
0x0f4: 40035000000000000000 |     rmmovq %rax, 80(%rbx)
0x0fe: 40035800000000000000 |     rmmovq %rax, 88(%rbx)
                            |     
0x108: 50130000000000000000 |     mrmovq (%rbx), %rcx
0x112: a01f                 |     pushq %rcx
0x114: 50132000000000000000 |     mrmovq 32(%rbx), %rcx
0x11e: a01f                 |     pushq %rcx
0x120: 80e002000000000000   |     call multiply
0x129: b0df                 |     popq %r13
0x12b: b0df                 |     popq %r13
0x12d: 50134000000000000000 |     mrmovq 64(%rbx), %rcx
0x137: 6001                 |     addq %rax, %rcx
0x139: 40134000000000000000 |     rmmovq %rcx, 64(%rbx)
                            |     
0x143: 50130800000000000000 |     mrmovq 8(%rbx), %rcx
0x14d: a01f                 |     pushq %rcx
0x14f: 50133000000000000000 |     mrmovq 48(%rbx), %rcx
0x159: a01f                 |     pushq %rcx
0x15b: 80e002000000000000   |     call multiply
0x164: b0df                 |     popq %r13
0x166: b0df                 |     popq %r13
0x168: 50134000000000000000 |     mrmovq 64(%rbx), %rcx
0x172: 6001                 |     addq %rax, %rcx
0x174: 40134000000000000000 |     rmmovq %rcx, 64(%rbx)
                            |     
0x17e: 50130000000000000000 |     mrmovq (%rbx), %rcx
0x188: a01f                 |     pushq %rcx
0x18a: 50132800000000000000 |     mrmovq 40(%rbx), %rcx
0x194: a01f                 |     pushq %rcx
0x196: 80e002000000000000   |     call multiply
0x19f: b0df                 |     popq %r13
0x1a1: b0df                 |     popq %r13
0x1a3: 50134800000000000000 |     mrmovq 72(%rbx), %rcx
0x1ad: 6001                 |     addq %rax, %rcx
0x1af: 40134800000000000000 |     rmmovq %rcx, 72(%rbx)
                            |     
0x1b9: 50130800000000000000 |     mrmovq 8(%rbx), %rcx
0x1c3: a01f                 |     pushq %rcx
0x1c5: 50133800000000000000 |     mrmovq 56(%rbx), %rcx
0x1cf: a01f                 |     pushq %rcx
0x1d1: 80e002000000000000   |     call multiply
0x1da: b0df                 |     popq %r13
0x1dc: b0df                 |     popq %r13
0x1de: 50134800000000000000 |     mrmovq 72(%rbx), %rcx
0x1e8: 6001                 |     addq %rax, %rcx
0x1ea: 40134800000000000000 |     rmmovq %rcx, 72(%rbx)
                            |     
0x1f4: 50131000000000000000 |     mrmovq 16(%rbx), %rcx
0x1fe: a01f                 |     pushq %rcx
0x200: 50132000000000000000 |     mrmovq 32(%rbx), %rcx
0x20a: a01f                 |     pushq %rcx
0x20c: 80e002000000000000   |     call multiply
0x215: b0df                 |     popq %r13
0x217: b0df                 |     popq %r13
0x219: 50135000000000000000 |     mrmovq 80(%rbx), %rcx
0x223: 6001                 |     addq %rax, %rcx
0x225: 40135000000000000000 |     rmmovq %rcx, 80(%rbx)
                            |     
0x22f: 50131800000000000000 |     mrmovq 24(%rbx), %rcx
0x239: a01f                 |     pushq %rcx
0x23b: 50133000000000000000 |     mrmovq 48(%rbx), %rcx
0x245: a01f                 |     pushq %rcx
0x247: 80e002000000000000   |     call multiply
0x250: b0df                 |     popq %r13
0x252: b0df                 |     popq %r13
0x254: 50135000000000000000 |     mrmovq 80(%rbx), %rcx
0x25e: 6001                 |     addq %rax, %rcx
0x260: 40135000000000000000 |     rmmovq %rcx, 80(%rbx)
                            |     
0x26a: 50131000000000000000 |     mrmovq 16(%rbx), %rcx
0x274: a01f                 |     pushq %rcx
0x276: 50132800000000000000 |     mrmovq 40(%rbx), %rcx
0x280: a01f                 |     pushq %rcx
0x282: 80e002000000000000   |     call multiply
0x28b: b0df                 |     popq %r13
0x28d: b0df                 |     popq %r13
0x28f: 50135800000000000000 |     mrmovq 88(%rbx), %rcx
0x299: 6001                 |     addq %rax, %rcx
0x29b: 40135800000000000000 |     rmmovq %rcx, 88(%rbx)
                            |     
0x2a5: 50131800000000000000 |     mrmovq 24(%rbx), %rcx
0x2af: a01f                 |     pushq %rcx
0x2b1: 50133800000000000000 |     mrmovq 56(%rbx), %rcx
0x2bb: a01f                 |     pushq %rcx
0x2bd: 80e002000000000000   |     call multiply
0x2c6: b0df                 |     popq %r13
0x2c8: b0df                 |     popq %r13
0x2ca: 50135800000000000000 |     mrmovq 88(%rbx), %rcx
0x2d4: 6001                 |     addq %rax, %rcx
0x2d6: 40135800000000000000 |     rmmovq %rcx, 88(%rbx)
                            |     
0x2e0:                      | multiply:
0x2e0: 50840800000000000000 |     mrmovq 8(%rsp), %r8
0x2ea: 50941000000000000000 |     mrmovq 16(%rsp), %r9
0x2f4: 30f00000000000000000 |     irmovq $0, %rax         #set result to 0
0x2fe: 30fa0000000000000000 |     irmovq $0, %r10         #register used for constant 0
0x308: 30fb0100000000000000 |     irmovq $1, %r11         #register used for constant 1
                            |     
0x312:                      | multiplyloopa:
0x312: 61a8                 |     subq %r10, %r8 #check if a != 0
0x314: 732a03000000000000   |     je multiplydone   #if a = 0, we are done
0x31d: 61b8                 |     subq %r11, %r8 #decrease a by 1.
0x31f: 6090                 |     addq %r9, %rax
0x321: 741203000000000000   |     jne multiplyloopa
                            |     
0x32a:                      | multiplydone:
0x32a: 90                   |     ret
                            |     
                            |     #set up constants
0x32b: 30f00100000000000000 |     irmovq $1, %rax
0x335: 30fb0000000000000000 |     irmovq $0, %r11
0x33f: 30fc0100000000000000 |     irmovq $1, %r12
0x349: 30fd0800000000000000 |     irmovq $8, %r13
                            |     
                            |     #set up hi pointer
0x353: 50a41000000000000000 |     mrmovq 16(%rsp), %r10   #hi pointer
0x35d:                      | increasehi:
0x35d: 61c8                 |     subq %r12, %r8
0x35f: 737303000000000000   |     je next
0x368: 60da                 |     addq %r13, %r10
0x36a: 705d03000000000000   |     jmp increasehi
0x373:                      | next:
                            |     
0x373: 50840800000000000000 |     mrmovq 8(%rsp), %r8
0x37d:                      | loop:
0x37d: 61c8                 |     subq %r12, %r8
0x37f: 73ba03000000000000   |     je ispaldone
0x388: 50690000000000000000 |     mrmovq (%r9), %rsi
0x392: 507a0000000000000000 |     mrmovq (%r10), %rdi
0x39c: 6167                 |     subq %rsi, %rdi
0x39e: 73b103000000000000   |     je ok 
0x3a7: 30f00000000000000000 |     irmovq $0, %rax
0x3b1:                      | ok:
0x3b1: 707d03000000000000   |     jmp loop
                            |     
0x3ba:                      | ispaldone:
0x3ba: 90                   |     ret
                            |     
0x5f8:                      |     .pos 0x5f8
0x5f8:                      | stack:
                            | 
